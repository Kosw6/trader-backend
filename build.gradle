plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'com.auth0:java-jwt:3.3.0'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	implementation 'org.apache.commons:commons-lang3:3.14.0'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-cache'      // @Cacheable 등
	implementation 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly 'org.postgresql:postgresql'


}
jacoco {
	toolVersion = "0.8.12"
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy tasks.jacocoTestReport   // 리포트는 테스트 후
}

tasks.jacocoTestReport {
	dependsOn tasks.test
	reports{
		xml.required.set(true)
		html.required.set(true)
	}
}

/** ③ 커버리지 게이트(70%) — 전체 번들 기준(필요 시 클래스/패키지 룰 추가 가능) */
tasks.jacocoTestCoverageVerification {
	dependsOn tasks.test
	violationRules {
//		rule {
//			element = 'BUNDLE'
//			limit {
//				counter = 'INSTRUCTION'
//				value   = 'COVEREDRATIO'
//				minimum = 0.70
//			}
//		}
//		 예) 특정 컨트롤러도 강제하려면 FQN 정확히:
		rule {
			element = 'CLASS'
			includes = ['com.example.trader.service.UserService']
			limit {
				counter = 'INSTRUCTION'
				value   = 'COVEREDRATIO'
				minimum = 0.50
			}
		}
	}
}

/** ④ check에 “강제 검사 + 커버리지 게이트”를 확실히 연결 */
tasks.named('check') {
//	dependsOn 'enforceTestsPresent'
//	dependsOn 'enforceCoverageData'
	dependsOn 'jacocoTestCoverageVerification'
}
tasks.register('printTestClasses') {
	dependsOn tasks.named('testClasses')
	doLast {
		def tree = sourceSets.test.output.classesDirs.asFileTree.matching { include '**/*.class' }
		println "== Compiled test classes =="
		tree.files.each { println it }
	}
}
/** (보험) build가 check를 반드시 타도록 — 기본이긴 하지만 명시해둬도 무방 */
tasks.named('build') {
	dependsOn 'check'
}
check.dependsOn jacocoTestCoverageVerification // ✅ 빌드/체크 시 커버리지 게이트 적용